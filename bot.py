import sqlite3
import telebot
from telebot import types
import datetime
import schedule
import time
from threading import Thread
import requests
from config import ADMIN_CHAT_ID, bot

conn = sqlite3.connect('events.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS events (event_id INTEGER PRIMARY KEY, description TEXT, organizer_link TEXT, end_time TEXT)''')
conn.commit()

def check_and_delete_events():
    """ –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–ª–æ """
    cursor.execute("SELECT event_id, end_time, organizer_link FROM events")
    current_time = datetime.datetime.now()
    for event_id, end_time_str, organizer_link in cursor.fetchall():
        end_time = datetime.datetime.strptime(end_time_str, '%Y-%m-%d %H:%M:%S')
        if current_time >= end_time:
            if organizer_link.startswith('@'):
                try:
                    user_info = bot.get_chat(organizer_link)
                    user_id = user_info.id
                except Exception as e:
                    user_id = None
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {organizer_link}: {e}")
            else:
                prefix = 'tg://user?id='
                user_id = int(organizer_link[len(prefix):]) if organizer_link.startswith(prefix) else None
            
            cursor.execute("DELETE FROM events WHERE event_id = ?", (event_id,))
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            bot.send_message(ADMIN_CHAT_ID, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ ID –∏–∑–≤–µ—Å—Ç–µ–Ω
            if user_id:
                bot.send_message(user_id, f"–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ.")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {organizer_link} –æ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å ID {event_id}.")

def schedule_checker():
    """ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ """
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–º–∏–Ω—É—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
schedule.every().minute.do(check_and_delete_events)
Thread(target=schedule_checker).start()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    btn2 = types.KeyboardButton("‚ùì –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    btn3 = types.KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
    btn4 = types.KeyboardButton("üëë –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    btn5 = types.KeyboardButton("üìÑ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    markup.add(btn1, btn2, btn3, btn5, btn4)
    bot.send_message(message.chat.id, text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏–π", reply_markup=markup)
    
@bot.message_handler(commands=['help'])
def help(message):
    bot.reply_to(message, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n")

def send_to_admin(message):
    user = message.from_user
    
    if message.text in ["üëã –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "‚ùì –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üëë –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìÑ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]:
        handle_text(message)
    else:
        if user.username:
            user_mention = f"@{user.username}" 
        else:
            user_mention = f'<a href="tg://user?id={user.id}">{user.first_name}</a>' 
    
        text_to_admin = (f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention} (ID {user.id}):\n"
                         f"{message.text}")
    
        bot.send_message(chat_id=ADMIN_CHAT_ID, text=text_to_admin, parse_mode='HTML')
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
def add_event_description(message):
    if message.text in ["üëã –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "‚ùì –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "üëë –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üìÑ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]:
        return handle_text(message)
    user_id = message.from_user.id
    organizer_link = f"@{message.from_user.username}" if message.from_user.username else f"tg://user?id={user_id}"
    
    if user_id != ADMIN_CHAT_ID:
        cursor.execute("SELECT COUNT(*) FROM events WHERE organizer_link = ?", (organizer_link,))
        event_count = cursor.fetchone()[0]
        if event_count >= 3:
            bot.send_message(message.chat.id, '–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –µ—Å—Ç—å, —Ç–æ –ø–∏—à–∏—Ç–µ –≤ "üëë –ü–æ–¥–¥–µ—Ä–∂–∫—É"')
            return start(message)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    markup.add(cancel_button)
    
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-05-20 18:30:00).",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, add_event_time, message.text)

def add_event_time(message, description):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
        return start(message)
    
    try:
        end_time = datetime.datetime.strptime(message.text, '%Y-%m-%d %H:%M:%S')
        current_time = datetime.datetime.now()
        
        if end_time <= current_time:
            bot.send_message(message.chat.id, "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return bot.register_next_step_handler(message, add_event_time, description)
        
        user_id = message.from_user.id
        organizer_link = f"@{message.from_user.username}" if message.from_user.username else f"tg://user?id={user_id}"
        
        cursor.execute("INSERT INTO events (description, organizer_link, end_time) VALUES (?, ?, ?)", 
                       (description, organizer_link, message.text))
        conn.commit()
        
        bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        return start(message)
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°.")
        return bot.register_next_step_handler(message, add_event_time, description)
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°.")
        bot.register_next_step_handler(message, add_event_time, description)

@bot.message_handler(commands=['events'])
def get_events(message):
    current_time = datetime.datetime.now()
    cursor.execute("SELECT * FROM events")
    events = cursor.fetchall()
    
    if events:
        response = "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {}\n\n–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:\n".format(current_time.strftime("%Y-%m-%d %H:%M:%S"))
        for event in events:
            event_id, description, organizer_link, end_time = event
            response += f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ID: {event_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer_link}\n–ù–∞—á–∞–ª–æ: {end_time}\n\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")

@bot.message_handler(commands=['delete_event'])
def delete_event_command(message):
    user_id = message.from_user.id
    if user_id == ADMIN_CHAT_ID:       
        reply_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        reply_markup.add(cancel_button)

        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':", reply_markup=reply_markup)
        bot.register_next_step_handler(msg, delete_event, user_id)
    else:
        if message.from_user.username:
            organizer_link = f"@{message.from_user.username}"
        else:
            organizer_link = f"tg://user?id={user_id}"
        
        cursor.execute("SELECT event_id, description FROM events WHERE organizer_link = ?", (organizer_link,))
        user_events = cursor.fetchall()
        
        if user_events:
            reply_markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            for event in user_events:
                event_button = types.KeyboardButton(str(event[0]))
                reply_markup.add(event_button)
            
            cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
            reply_markup.add(cancel_button)

            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':", reply_markup=reply_markup)
            bot.register_next_step_handler(msg, delete_event, user_id)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.")

@bot.message_handler(commands=['send_message'])
def start_sending_message(message):
    if message.chat.id == ADMIN_CHAT_ID: 
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(msg, get_user_id)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def get_user_id(message):
    if message.text.isdigit():
        user_id = int(message.text)
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, send_user_message, user_id)
    else:
        bot.send_message(message.chat.id, "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

def send_user_message(message, user_id):
    try:
        bot.send_message(user_id, message.text)
        bot.send_message(ADMIN_CHAT_ID, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")
    except Exception as e:
        bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}: {str(e)}")

def delete_event(message, user_id):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        start(message)
        return

    try:
        event_id = int(message.text.strip())

        if user_id == ADMIN_CHAT_ID:
            cursor.execute("DELETE FROM events WHERE event_id = ?", (event_id,))
            if cursor.rowcount > 0:
                conn.commit()
                bot.send_message(message.chat.id, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} —É–¥–∞–ª–µ–Ω–æ.")
            else:
                bot.send_message(message.chat.id, "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            if message.from_user.username:
                organizer_link = f"@{message.from_user.username}"
            else:
                organizer_link = f"tg://user?id={user_id}"

            cursor.execute("SELECT * FROM events WHERE event_id = ? AND organizer_link = ?", (event_id, organizer_link))
            if cursor.fetchone():
                cursor.execute("DELETE FROM events WHERE event_id = ? AND organizer_link = ?", (event_id, organizer_link))
                conn.commit()
                bot.send_message(message.chat.id, f"–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å ID {event_id} —É–¥–∞–ª–µ–Ω–æ.")
            else:
                bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ –æ–Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
        start(message)

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
def my_events(message):
    user_id = message.from_user.id
    if message.from_user.username:
        organizer_link = f"@{message.from_user.username}"
    else:
        organizer_link = f"tg://user?id={user_id}"
    
    cursor.execute("SELECT event_id, description, end_time FROM events WHERE organizer_link = ?", (organizer_link,))
    events = cursor.fetchall()
    
    if not events:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return
    
    response = "–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
    for event_id, description, end_time in events:
        response += f"ID: {event_id}, –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –ù–∞—á–∞–ª–æ: {end_time}\n"
    
    bot.send_message(message.chat.id, response)
    

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "üëã –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        bot.register_next_step_handler(message, add_event_description)
    elif message.text == "‚ùì –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        get_events(message)
    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ":
        delete_event_command(message)
    elif message.text == "üëë –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, —Ç–æ —è –∂–¥—É –í–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        bot.register_next_step_handler(message, send_to_admin)
    elif message.text == "üìÑ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        my_events(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")

if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except requests.exceptions.ReadTimeout:
            print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ReadTimeout ‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
            time.sleep(5)
        except KeyboardInterrupt:
            print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            break
        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(5)